#!/usr/bin/env php
<?php

require 'vendor/autoload.php';

// ...
use Symfony\Component\Serializer\Encoder\CsvEncoder;
use Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Normalizer\PropertyNormalizer;
use Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer;
use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory;
use Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader;
use Doctrine\Common\Annotations\AnnotationReader;

use Outsanity\IpAnalysis\SpecialAddressBlock;
use Symfony\Component\Serializer\Annotation\SerializedName;
use Doctrine\ORM\Mapping\Column;

// Doctrine hates autoloaders
class_exists('Symfony\Component\Serializer\Annotation\SerializedName');
class_exists('Doctrine\ORM\Mapping\Column');

$classMetadataFactory = new ClassMetadataFactory(new AnnotationLoader(new AnnotationReader()));

$metadataAwareNameConverter = new MetadataAwareNameConverter($classMetadataFactory);

$serializer = new Serializer(
    [new GetSetMethodNormalizer($classMetadataFactory, $metadataAwareNameConverter), new ArrayDenormalizer()],
    ['csv' => new CsvEncoder()]
);

$files = [
    'ipv4' => dirname(__DIR__) . '/data/iana-ipv4-special-registry-1.csv',
    'ipv6' => dirname(__DIR__) . '/data/iana-ipv6-special-registry-1.csv',
];

$multicastBlock = (new SpecialAddressBlock())
    ->setAddressBlock('224.0.0.0/4')
    ->setDestination(false)
    ->setGloballyReachable(false)
    ->setName('Multicast')
    ->setRfc('RFC4604')
    ->setSource(true)
    ->setType(SpecialAddressBlock::TYPE_OTHER);

$extras = [
    'ipv4' => [
        (clone $multicastBlock)->setAddressBlock('224.0.0.0/4'),
    ],
    'ipv6' => [
        (clone $multicastBlock)->setAddressBlock('ff00::/8'),
    ],
];

foreach ($files as $which => $inFile) {
    $data = file_get_contents($inFile);
    $blocks = $serializer->deserialize($data, 'Outsanity\IpAnalysis\SpecialAddressBlock[]', 'csv');

    foreach ($blocks as $block) {
        $block->setType(SpecialAddressBlock::TYPE_IANA);
        $cidr = $block->getAddressBlock();
        if (strpos($cidr, ',')) {
            $all = explode(', ', $cidr);
            $first = array_shift($all);
            $block->setAddressBlock(trim($first));
            foreach ($all as $split) {
                $newBlock = clone $block;
                $newBlock->setAddressBlock(trim($split));
                array_push($blocks, $newBlock);
            }
        }
    }

    $blocks = array_merge($blocks, $extras[$which]);

    $outFile = preg_replace('/.csv$/', '.php', $inFile);
    file_put_contents($outFile, '<?php return ' . var_export($blocks, true) . ';');
}

// vim:ai:cin:et:ts=4:sw=4:fo+=or
